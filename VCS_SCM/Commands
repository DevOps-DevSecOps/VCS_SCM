[Add]
git add .
git add *.EXTENSION
git add -f .                                            # -f, --force
git add -A
git add -u                                              # allows us to stage only the modified and deleted files, not allows stage the newly created file
git add FILE_NAME
git add --ignore-removal .                              # allows us only updated and newly created files at once

[Branch]
git branch -D BRANCH_NAME

[Config]
git config --edit --global
git config --list
git config --global --list
git config --global user.name "USER_NAME"
git config --global user.email "EMAIL_ID"
git config --global core.editor EDITOR_NAME

[Checkout]
git checkout BRANCH_NAME
git checkout -b BRANCH_NAME

[Clone]
git clone REMOTE_REPOSITORY_URL(HTTPS/SSH)
git clone REMOTE_REPOSITORY_URL(HTTPS/SSH) "FOLDER_NAME"                                        # cloning a repository into a specific local folder without switching to that particular folder/directory
git clone -b BRANCH_NAME REMOTE_REPOSITORY_URL(HTTPS/SSH)                                       # cloning specific branch from repository
git clone -b BRANCH_NAME REMOTE_REPOSITORY_URL(HTTPS/SSH) "FOLDER_NAME"                         # cloning specific branch from repository into particular custom folder
git clone --branch=BRANCH_NAME REMOTE_REPOSITORY_URL(HTTPS/SSH)
git clone --branch=BRANCH_NAME REMOTE_REPOSITORY_URL(HTTPS/SSH) FOLDER_NAME                     # cloning specific branch from repository into particular custom folder

[Commit]
git commit                                                                      # it will open the default text editor and ask for the commit message
git commit -a                                                                   # it work for only update/modified to existing file and it commit and so it won't work for newly created files and it won't commit, it will prompt default text editor and ask for the commit message and then save and exit from the editor
git commit -m "COMMIT_MESSAGE"                                                  # lets to write the commit message on the command line
git commit -am "COMMIT_MESSAGE"                                                 # it work for only update/modified to existing file and it commit and so it won't work for newly created files and it won't commit, lets to write the commit message on the command line

[Fetch]
git fetch
git fetch origin
git fetch REMOTE_NAME

[Init]
git init                                                                        # create an empty .git repository in current path
git init FOLDER_NAME                                                            # create an empty .git repository under a directory

[Log]
git log

[Pull]
git pull
git pull --rebase
git pull origin BRANCH_NAME
git pull REMOTE_NAME
git pull REMOTE_NAME BRANCH_NAME

[Push]
git push
git push origin BRANCH_NAME
git push -u origin BRANCH_NAME
git push -f origin BRANCH_NAME

[Rebase]
git rebase
git rebase --abort

[Remove/Delete]
git rm FILE_NAME
git rm -r FOLDER_NAME

[Remote]
git remote
git remote -v
git remote --verbose
git remote set-url origin REMOTE_REPOSITORY_URL(HTTPS/SSH)                                        # switching URL's HTTPS/SSH
git remote set-url REMOTE_NAME REMOTE_REPOSITORY_URL(HTTPS/SSH)
git remote add origin https://TOKEN@github.com/USER_NAME/REPOSITORY_NAME.git                
git remote add origin https://TOKEN@github.com/ORGANIZATION_NAME/REPOSITORY_NAME.git
git remote add REMOTE_NAME REMOTE_REPOSITORY_URL(HTTPS/SSH)                                       # adding a short name for remote
git remote show REMOTE_NAME
git remote rename OLD_REMOTE_NAME NEW_REMOTE_NAME
git remote rm origin
git remote remove origin

[Reset]
git reset FILE_NAME

[Stash]
git stash
git stash pop

[Status]
git status
