[Version]
git --version

[Add]
git add .
git add *
git add *.EXTENSION
git add -f .                                            # -f, --force
git add -A
git add -u                                              # allows us to stage only the modified and deleted files, not allows stage the newly created file
git add FILE_NAME
git add --ignore-removal .                              # allows us only updated and newly created files at once

[Blame]
git blame FILE_NAME
git blame -e FILE_NAME                                  # it shows the authors email address instead of username
git blame -w FILE_NAME                                  # ignores whitespace changes, if a previous author has modified the spacing of a file by switching from tabs to spaces or adding new lines
git blame -M FILE_NAME                                  # detects moved or copied lines within in the same file, it will report the original author of the lines instead of the last author that moved or copied the lines
git blame -C FILE_NAME                                  # detects lines that were moved or copied from other files, it will report the original author of the lines instead of the last author that moved or copied the lines
git blame -L NO,NO FILE_NAME                            # restrict the output to the requested line range, restricted the output to lines NO through NO

[Branch]
git branch                                              # list all of the available branches in repository
git branch --list
git branch -a
git branch -vv
git branch BRANCH_NAME                                  # create a new branch
git branch -m OLD_BRANCH_NAME NEW_BRANCH_NAME           # rename the branch
git branch -d BRANCH_NAME                               # delete a branch in local repository
git branch -D BRANCH_NAME

[Config]
git config --edit --global
git config --list
git config --global --list
git config --global user.name "USER_NAME"
git config --global user.email "EMAIL_ID"
git config --global core.editor EDITOR_NAME

[Checkout]
git checkout -                                                                                  # it go back to the previous branch, when switched to branches
git checkout BRANCH_NAME                                                                        # switch between the existing branches
git checkout -b BRANCH_NAME                                                                     # create and switch to a new branch
git checkout -b NEW_BRANCH_NAME SOURCE_BRANCH_NAME                                              # create and switch to a new branch from particular existing branch
git checkout -b BRANCH_NAME TAG_NAME                                                            # create a new branch with a tag
git checkout COMMIT_ID                                                                          # it an detached Head, from the latest recent commit to an older commit

[Clone]
git clone REMOTE_REPOSITORY_URL(HTTPS/SSH)
git clone REMOTE_REPOSITORY_URL(HTTPS/SSH) "FOLDER_NAME"                                        # cloning a repository into a specific local folder without switching to that particular folder/directory
git clone -b BRANCH_NAME REMOTE_REPOSITORY_URL(HTTPS/SSH)                                       # cloning specific branch from repository
git clone -b BRANCH_NAME REMOTE_REPOSITORY_URL(HTTPS/SSH) "FOLDER_NAME"                         # cloning specific branch from repository into particular custom folder
git clone --branch=BRANCH_NAME REMOTE_REPOSITORY_URL(HTTPS/SSH)
git clone --branch=BRANCH_NAME REMOTE_REPOSITORY_URL(HTTPS/SSH) FOLDER_NAME                     # cloning specific branch from repository into particular custom folder

[Commit]
git commit                                                                      # it will open the default text editor and ask for the commit message
git commit -a                                                                   # it work for only update/modified to existing file and it commit and so it won't work for newly created files and it won't commit, it will prompt default text editor and ask for the commit message and then save and exit from the editor
git commit -m "COMMIT_MESSAGE"                                                  # lets to write the commit message on the command line
git commit -am "COMMIT_MESSAGE"                                                 # it work for only update/modified to existing file and it commit and so it won't work for newly created files and it won't commit, lets to write the commit message on the command line

[Cherry-Pick]


[Diff]
git diff
git diff HEAD
git diff --staged                                                               # to track the changes in the staging area
git diff COMMIT_ID COMMIT_ID                                                    # to compare different between the commits
git diff BRANCH_NAME BRANCH_NAME                                                # to compare different between the branches

[Fetch]
git fetch
git fetch --all
git fetch origin
git fetch REMOTE_NAME

[Init]
git init                                                                        # create an empty .git repository in current path
git init .
git init FOLDER_NAME                                                            # create an empty .git repository under a directory

[Log]
git log
git log -NO                                                                     # NO = then pass the argument by using count NO (eg: git log -10) 
git log --oneline                                                               # it display the first seven characters of the commit SHA and the commit message
git log --graph                                                                 # it allows viewing git log as a graph
git log --graph --oneline
git log --stat                                                                  # it displays the modified files and it shows the no of lines
git log -p                                                                      # it displays the modified files and it shows the location of the lines that added, removed and updated
git log --patch
git log --author="NAME"
git log --author="@gmail.com"
git log --grep="COMMIT_MESSAGE"
git log --pretty=oneline | tail -n NO

[Merge]
git merge BRANCH_NAME                                                           # current branch merged with target branch

[Pull]
git pull
git pull --rebase
git pull origin BRANCH_NAME
git pull REMOTE_NAME
git pull REMOTE_NAME BRANCH_NAME

[Push]
git push
git push -f
git push -v
git push --verbose
git push --all
git push origin BRANCH_NAME
git push -u origin BRANCH_NAME
git push -f origin BRANCH_NAME
git push origin --delete BRANCH_NAME                                            # delete a branch in remote repository
git push --set-upstream origin BRANCH_NAME

[Reflog]
git reflog
git reflog show HEAD                                                            # it display all HEAD commits
git reflog show --all                                                           #

[Revert]
git revert COMMIT_ID
git revert -e COMMIT_ID                                                         # edit the commit message before reverting the commit
git revert HEAD
git revert HEAD~NO                                                              # No is an argument to pass the numbers.

[Reset]
git reset --hard HEAD@{NO}

[Restore]
git restore .                                                                   # to discard/undo/remove all changes in working directory
git restore *.EXTENSION
git restore FILE_NAME                                                           # to discard/undo/remove changes a particular file in working directory
git restore FILE_NAME FILE_NAME
git restore --staged .                                                          # to discard/undo/remove all changes from staging area to working directory
git restore --staged *.EXTENSION
git restore --staged FILE_NAME                                                  # to discard/undo/remove changes a particular file from staging area to working directory
git restore --staged FILE_NAME FILE_NAME

[Rebase]
git rebase
git rebase --abort

[Remove/Delete]
git rm FILE_NAME
git rm -r FOLDER_NAME

[Remote]
git remote
git remote -v
git remote --verbose
git remote set-url origin REMOTE_REPOSITORY_URL(HTTPS/SSH)                                        # switching URL's HTTPS/SSH
git remote set-url REMOTE_NAME REMOTE_REPOSITORY_URL(HTTPS/SSH)
git remote add origin REMOTE_REPOSITORY_URL(HTTPS/SSH) 
git remote add REMOTE_NAME REMOTE_REPOSITORY_URL(HTTPS/SSH)                                       # adding a short name for remote
git remote show REMOTE_NAME
git remote rename OLD_REMOTE_NAME NEW_REMOTE_NAME
git remote rm origin
git remote remove origin

[Reset]
git reset HEAD
git reset FILE_NAME

[Show]
git show
git show HEAD
git show COMMIT_ID
git show TAG_NAME

[Stash]
git stash
git stash pop

[Status]
git status

[Switch]
git switch -                                                                                       # it go back to the previous branch, when switched to branches
git switch BRANCH_NAME                                                                             # switch between the existing branches
git switch -c BRANCH_NAME                                                                          # create and switch to a new branch

[Tags]
git tag                                                                                            # list the tags in repository
git tag -l "TAG_NAME*"                                                                             # list the tags in repository with pattern 
git push origin TAG_NAME                                                                           # push an particular tag
git push --tags                                                                                    # push all the available tags at once from the local repository to the remote repository
git push origin --tags
git tag -d TAG_NAME                                                                                # deleting a tag from the local repository
git tag -d TAG_NAME TAG_NAME
git tag --delete TAG_NAME
git push origin -d TAG_NAME                                                                        # deleting a tag from the remote repository
git push origin -d TAG_NAME TAG_NAME
git push origin --delete TAG_NAME
git tag TAG_NAME COMMIT_ID                                                                         # create a tag from an older commit on that point
► Light-Weighted
git tag TAG_NAME                                                                                   # create a tag
► Annotated
git tag TAG_NAME -m "TAG_MESSAGE"                                                                  # create a tag with a message
