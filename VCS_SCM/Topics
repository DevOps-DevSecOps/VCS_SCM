[Add]
It is used to add file contents to the Index (Staging Area) from Working Directory.
The git add command can be run many times before making a commit.
These all add operations can be put under one commit.

[Branch]
If add a new feature or fix a bug, spawn a new branch to summarize changes.

[Commit]
It is used to record the changes in the repository.

[Checkout]
It is used to switch between branches in a repository.
The git checkout command operates upon three different entities which are files, commits and branches.

[Clone]
It is the act of making a copy of any target repository.
It can clone your repository from the remote repository to create a local copy on your system.

[Fetch]

[Head]
It is a reference that points out the latest recent commit in the current checkout branch.
It is just like a pointer that keeps track of the latest commit in current branch.

[Init]
It is used to create a new blank repository.
It is used to make an existing project as a Git project.
Several Git commands run inside the repository, but init command can be run outside of the repository.
It creates a .git subdirectory in the current Working Directory.
It newly created subdirectory contains all of the necessary metadata.

[Log]
It is a record of commits.
COMMIT_ID = It is a 40 character checksum data generated by SHA (Secure Hash Algorithm) algorithm. It is a unique number.
Author = The information of authors such as author name and email.
Date = It a date timestamp for the time of the commit.
COMMIT_MESSAGE = It is the overview of the commit given in the commit message.
If run the git log command and stuck there, then press the q (Q for quit). It will quit you from the situation and back you to the command line.

[Merge]
It allows to merge the other branch with the currently active branch.

[Pull]
It fetches and merges the entire changes on the remote repository into local repository and then into working directory.

[Push]
It upload local repository content to a remote repository.

[Revert]
It is an undo type command.
It does not delete any data in this process, instead it will create a new change with the specified new commit id.
It is a forward-moving undo operation that offers a safe method of undoing changes.
Instead of deleting commits in the commit history, a revert will create a new commit that inverses the changes specified.
A revert is safer than a reset because it will not remove any commits from a shared history.
A revert will retain the commits you want to undo and create a new commit that inverts the undesired commit.

[Reset]
► Soft
► Mixed
► Hard

[Restore]
It helps to discard uncommitted from Working Directory and also to discard unstage from Staging Area.
It can be used to undo the effects of git add and unstage changes have previously added to the Staging Area.

[Remote]
It allows accessing the connection between remote and local.
Origin is the default name for the remote server, which is given by Git.

[Status]
It allows us to see the tracked, untracked files and changes.

[Switch]
It is used to switch between branches in a repository.
The git switch command operates only switch between the existing branches, it doesn't support operates like files, commits.

[Tags]
It make a point as a specific point in Git history.
It used to mark a commit stage as relevant.
It can have any number of tags on a branch or different branches. So tags are created to the branches.
when to create a Tags:
If want to create a release point for a stable version of code.
► Light-Weighted
It does not store unnecessary information to keep it light-weight.
► Annotated
It contain some additional information like author name and other project related information.
It store extra Metadata like developer name, email, date, and more.
It stored as a bundle of objects in the Git database.
